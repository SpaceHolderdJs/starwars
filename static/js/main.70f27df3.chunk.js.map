{"version":3,"sources":["Components/Character.js","Components/People.js","Components/Planet.js","Components/Planets.js","Components/Starship.js","Components/Starships.js","App.js","reportWebVitals.js","index.js"],"names":["Character","item","name","height","mass","gender","created","birth_year","useState","more","setMore","className","style","justifyContent","onClick","Date","parse","toLocaleDateString","People","data","setData","useEffect","fetch","then","response","json","results","length","map","indx","Planet","rotation_period","orbital_period","diameter","climate","gravity","terrain","population","Planets","Starship","model","manufacturer","cost_in_credits","crew","passengers","Starships","App","scene","THREE","camera","window","innerWidth","innerHeight","renderer","setSize","domElement","classList","add","document","body","appendChild","geometry","material","color","starCollector","Star","star","position","set","Math","floor","random","scale","x","y","z","setRGB","i","animate","requestAnimationFrame","rotation","render","addEventListener","aspect","updateProjectionMatrix","event","pageX","to","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.70f27df3.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst Character = ({ item }) => {\r\n  const { name, height, mass, gender, created, birth_year } = item;\r\n  const [more, setMore] = useState(false);\r\n\r\n  return (\r\n    <div className=\"card column\">\r\n      <div className=\"row centered\" style={{ justifyContent: \"space-between\" }}>\r\n        <h2>{name}</h2>\r\n        <button onClick={() => setMore(!more)}>\r\n          {!more ? \"More\" : \"Less\"}\r\n        </button>\r\n      </div>\r\n      {more && (\r\n        <>\r\n          <div className=\"divider\"></div>\r\n          <span>Height: {height}</span>\r\n          <span>Mass: {mass}</span>\r\n          <span>Gender: {gender}</span>\r\n          <span>Birthday: {birth_year}</span>\r\n          <span>\r\n            Created: {new Date(Date.parse(created)).toLocaleDateString()}\r\n          </span>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Character;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Character from \"./Character\";\r\n\r\nconst People = () => {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://swapi.dev/api/people\")\r\n      .then((response) => response.json())\r\n      .then((data) => setData(data.results));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"component column centered\">\r\n      <h1>People</h1>\r\n      {data.length < 1 ? (\r\n        <h1>Loading...</h1>\r\n      ) : (\r\n        data.map((item, indx) => <Character item={item} key={indx} />)\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default People;\r\n","import { useState } from \"react\";\r\n\r\nconst Planet = ({ item }) => {\r\n  const {\r\n    name,\r\n    rotation_period,\r\n    orbital_period,\r\n    diameter,\r\n    climate,\r\n    gravity,\r\n    terrain,\r\n    population,\r\n    created,\r\n  } = item;\r\n  const [more, setMore] = useState(false);\r\n  return (\r\n    <div className=\"card column\">\r\n      <div className=\"row centered\" style={{ justifyContent: \"space-between\" }}>\r\n        <h2>{name}</h2>\r\n        <button onClick={() => setMore(!more)}>\r\n          {!more ? \"More\" : \"Less\"}\r\n        </button>\r\n      </div>\r\n      {more && (\r\n        <>\r\n          <div className=\"divider\"></div>\r\n          <span>Rotation period: {rotation_period}</span>\r\n          <span>Orbital period: {orbital_period}</span>\r\n          <span>Diameter: {diameter}</span>\r\n          <span>Climate: {climate}</span>\r\n          <span>Gravity: {gravity}</span>\r\n          <span>Terrain: {terrain}</span>\r\n          <span>Population: {population}</span>\r\n          <span>\r\n            Created: {new Date(Date.parse(created)).toLocaleDateString()}\r\n          </span>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Planet;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Planet from \"./Planet\";\r\n\r\nconst Planets = () => {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://swapi.dev/api/planets\")\r\n      .then((response) => response.json())\r\n      .then((data) => setData(data.results));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"component column centered\">\r\n      <h1>Planets</h1>\r\n      {data.length < 1 ? (\r\n        <h1>Loading...</h1>\r\n      ) : (\r\n        data.map((item, indx) => <Planet item={item} key={indx} />)\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Planets;\r\n","import { useState } from \"react\";\r\n\r\nconst Starship = ({ item }) => {\r\n  const {\r\n    name,\r\n    model,\r\n    manufacturer,\r\n    cost_in_credits,\r\n    crew,\r\n    passengers,\r\n    created,\r\n  } = item;\r\n  const [more, setMore] = useState(false);\r\n  return (\r\n    <div className=\"card column\">\r\n      <div className=\"row centered\" style={{ justifyContent: \"space-between\" }}>\r\n        <h2>{name}</h2>\r\n        <button onClick={() => setMore(!more)}>\r\n          {!more ? \"More\" : \"Less\"}\r\n        </button>\r\n      </div>\r\n      {more && (\r\n        <>\r\n          <div className=\"divider\"></div>\r\n          <span>Model: {model}</span>\r\n          <span>manufacturer: {manufacturer}</span>\r\n          <span>Price: {cost_in_credits}</span>\r\n          <span>Crew: {crew}</span>\r\n          <span>Passangers: {passengers}</span>\r\n          <span>\r\n            Created: {new Date(Date.parse(created)).toLocaleDateString()}\r\n          </span>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Starship;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Starship from \"./Starship\";\r\n\r\nconst Starships = () => {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://swapi.dev/api/starships\")\r\n      .then((response) => response.json())\r\n      .then((data) => setData(data.results));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"component column centered\">\r\n      <h1>Starships</h1>\r\n      {data.length < 1 ? (\r\n        <h1>Loading...</h1>\r\n      ) : (\r\n        data.map((item, indx) => <Starship item={item} key={indx} />)\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Starships;\r\n","import \"./App.css\";\r\nimport { BrowserRouter as Router, Link, Switch, Route } from \"react-router-dom\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\r\n\r\nimport People from \"./Components/People\";\r\nimport Planets from \"./Components/Planets\";\r\nimport Starships from \"./Components/Starships\";\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    const scene = new THREE.Scene();\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.domElement.classList.add(\"three\");\r\n\r\n    document.body.appendChild(renderer.domElement);\r\n\r\n    const geometry = new THREE.SphereGeometry();\r\n    const material = new THREE.MeshBasicMaterial({ color: \"white\" });\r\n\r\n    const starCollector = new THREE.Object3D();\r\n\r\n    class Star {\r\n      constructor() {\r\n        const star = new THREE.Mesh(geometry, material);\r\n        star.position.set(\r\n          20 - Math.floor(Math.random() * 40),\r\n          20 - Math.floor(Math.random() * 40),\r\n          100 - Math.floor(Math.random() * 30)\r\n        );\r\n\r\n        star.scale.x = star.scale.y = star.scale.z = 0.03;\r\n\r\n        star.material.color.setRGB(\r\n          Math.floor(Math.random() * 100),\r\n          10,\r\n          Math.floor(Math.random() * 60)\r\n        );\r\n\r\n        starCollector.add(star);\r\n      }\r\n    }\r\n\r\n    const starsQuantity = 1000;\r\n\r\n    for (let i = 0; i < starsQuantity; i++) {\r\n      new Star();\r\n    }\r\n\r\n    scene.add(starCollector);\r\n\r\n    camera.position.z = 100;\r\n\r\n    const animate = function () {\r\n      requestAnimationFrame(animate);\r\n\r\n      starCollector.rotation.z += 0.005;\r\n\r\n      renderer.render(scene, camera);\r\n    };\r\n\r\n    animate();\r\n\r\n    const onWindowResize = () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n\r\n    window.addEventListener(\"resize\", onWindowResize);\r\n\r\n    const onMouseMove = (event) => {\r\n      camera.rotation.y = (event.pageX - window.innerWidth / 2) * 0.00009;\r\n    };\r\n\r\n    window.addEventListener(\"mousemove\", onMouseMove);\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App column centered\">\r\n        <header className=\"row centered\">\r\n          <Link to=\"/\">main</Link>\r\n          <Link to=\"/people\">peole</Link>\r\n          <Link to=\"/starships\">starships</Link>\r\n          <Link to=\"/planets\">planets</Link>\r\n        </header>\r\n\r\n        <Switch>\r\n          <Route path=\"/\" exact>\r\n            <h1>Main</h1>\r\n          </Route>\r\n          <Route path=\"/people\">\r\n            <People />\r\n          </Route>\r\n          <Route path=\"/starships\">\r\n            <Starships />\r\n          </Route>\r\n          <Route path=\"/planets\">\r\n            <Planets />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}